define ROOT <%= @install_dir %>

Moduledir         %ROOT%\modules
CacheDir          %ROOT%\data
Pidfile           %ROOT%\data\nxlog.pid
SpoolDir          %ROOT%\data
LogFile           %ROOT%\data\nxlog.log
LogLevel          INFO

# http://nxlog-ce.sourceforge.net/nxlog-docs/en/nxlog-reference-manual.html#xm_charconv
# EventLogs > Win2008/Vista seem to be in CP1252 format
<Extension _charconv>
    Module        xm_charconv
    AutodetectCharsets utf-8, cp1252, utf-16
</Extension>

# nxlog-ce.sourceforge.net/nxlog-docs/en/nxlog-reference-manual.html#sources_os_windows_iis_format_w3c
# W3C format from IIS is in UTF-8 format
<Extension w3c>
    Module        xm_csv
    # IIS Log format   
    #Fields: date time s-ip cs-method cs-uri-stem cs-uri-query s-port cs-username c-ip cs(User-Agent) cs(Referer) sc-status sc-substatus sc-win32-status sc-bytes cs-bytes time-taken
                       
    Fields        $date, $time, $host, $http_method, $http_path, $http_querystring, $port, $http_username, $client_ip, $http_useragent, $http_referrer, $http_status_code, $http_sub_status_code, $win32_status_code, $bytes_sent $bytes_received $duration
    FieldTypes    string, string, string, string, string, string, integer, string, string, string, string, integer, integer, integer, integer, integer, integer
    Delimiter     ' '
    QuoteChar     '"'
    EscapeControl FALSE
    UndefValue    -
</Extension>

# needed to convert things to JSON
# http://nxlog-ce.sourceforge.net/nxlog-docs/en/nxlog-reference-manual.html#xm_json
<Extension json>
    Module        xm_json
</Extension>

#<Processor iis_clean>
#    Module	      pm_null
#    Exec          $EventTime = ($date + "T" + $time + '<%= @utc_offset %>'); \
#                  $level = "debug"; \
#                  delete($time); \
#                  delete($date);
#</Processor>

<Processor iis_clean>
    Module	      pm_null
    Exec          $EventTime = ($date + "T" + $time + '+0000'); \
                  $level = "debug"; \
                  delete($time); \
                  delete($date);
</Processor>
<Processor infrastructure_clean>
    Module	      pm_null
    Exec          $level = $Severity; \
                  delete($Severity); \
                  delete($SeverityValue);
</Processor>

# rewrite all input raw events to UTF-8 encoded JSON
# also, remove EventReceivedTime that I don't care about: only care about when the original event happened
# Also see 'iconv -l' on unix systems for a list of encodings available
# http://nxlog-ce.sourceforge.net/nxlog-docs/en/nxlog-reference-manual.html#core_functions
# http://nxlog-ce.sourceforge.net/nxlog-docs/en/nxlog-reference-manual.html#modules_processor
# http://nxlog-ce.sourceforge.net/nxlog-docs/en/nxlog-reference-manual.html#xm_charconv_proc_convert_fields
# Processors are per-route, so don't try and re-use them; they are not referentially transparent
<Processor eventlog_rewrite>
    Module	      pm_null
    Exec          convert_fields("AUTO", "utf-8"); \
                  if defined $level $level = lc($level); \
                  if (string($EventTime) =~ /^(\d{4}-\d{2}-\d{2})\s(\d{2}:\d{2}:\d{2})/) $EventTime = ($1 + "T" + $2 + '<%= @utc_offset %>'); \
                  if not defined($hostname) $hostname = hostname(); \
				  if not defined($message) and defined($http_path) $message = $http_path; \
                  delete($EventReceivedTime); \
                  to_json();
</Processor>
<Processor infrastructure_rewrite>
    Module	      pm_null
    Exec          convert_fields("AUTO", "utf-8"); \
                  if defined $level $level = lc($level); \
                  if (string($EventTime) =~ /^(\d{4}-\d{2}-\d{2})\s(\d{2}:\d{2}:\d{2})/) $EventTime = ($1 + "T" + $2 + '<%= @utc_offset %>'); \
                  if not defined($hostname) $hostname = hostname(); \
				  if not defined($message) and defined($http_path) $message = $http_path; \
                  delete($EventReceivedTime); \
                  to_json();
</Processor>
<Processor iis_rewrite>
    Module	      pm_null
    Exec          convert_fields("AUTO", "utf-8"); \
                  if defined $level $level = lc($level); \
                  if (string($EventTime) =~ /^(\d{4}-\d{2}-\d{2})\s(\d{2}:\d{2}:\d{2})/) $EventTime = ($1 + "T" + $2 + '<%= @utc_offset %>'); \
                  if not defined($hostname) $hostname = hostname(); \
				  if not defined($message) and defined($http_path) $message = $http_path; \
                  delete($EventReceivedTime); \
                  to_json();
</Processor>

<Input eventlog>
    Module        im_msvistalog

    # http://msdn.microsoft.com/en-us/library/aa385231.aspx
    # http://msdn.microsoft.com/en-us/library/ff604025(v=office.14).aspx
    # Level 1 (ID=30  Critical)     severity level events
    # Level 2 (ID=40  Error)        severity level events
    # Level 3 (ID=50  Warning)      severity level events
    # Level 4 (ID=80  Information)  severity level events
    # Level 5 (ID=100 Verbose)      severity level events
    # All channels are included by default which are listed in the registry under these:
    # HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\WINEVT\Channels 
    # HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\services\eventlog\System
    #
    # <Select Path='Key Management Service'>*</Select></Query>\
    # <Select Path='Internet Explorer'>*</Select></Query>\
    # <Select Path='HardwareEvents'>*</Select></Query>\
    #
    Query   <QueryList>\
        <Query Id="0">\
            <Select Path="Security">*</Select>\
            <Select Path="System">*</Select>\
            <Select Path="Application">*</Select>\
            <Select Path="Setup">*</Select>\
            <Select Path='Windows PowerShell'>*</Select>\
        </Query>\
    </QueryList>

    # Turn EventTime into UTC, remove nonsensical properties
    Exec          $service = "Windows"; delete($Keywords);
</Input>

<% iis_sites = (scope['::iis_sites'] || '').split(',')
   iis_sites.each do |site| %>
<Input <%= site %>> 
    Module          im_file 
    File            '<%= scope["::iis_#{site}_logdir"] %>\\*.log'
    ReadFromLast    TRUE
    Exec            if (($raw_event =~ /^#/) or ($raw_event =~ /^$/)) drop(); \
                    else w3c->parse_csv(); \
                    $service = "<%= site %>";
</Input>
<% end %>

<Input nxlog_internal>
    Module        im_internal
	Exec          $service = "nxlog";
</Input>

<Output logstash_eventlog>
    Module        om_tcp
    Host          logstash
    Port          1935
</Output>

<Output logstash_infrastructure>
    Module        om_tcp
    Host          logstash
    Port          1937
</Output>

<Output logstash_iis>
    Module        om_tcp
    Host          logstash
    Port          1938
</Output>

<Output file_out_test>
    Module        om_file
    File         '<%= @install_dir %>\data\nxlogtestout.log'
</Output>

<Route eventlog>
    Path          eventlog => eventlog_rewrite => logstash_eventlog
</Route>
#<Route debug_eventlog>
#    Path          eventlog => eventlog_rewrite => file_out_test
#</Route>

# apps: only from within apps, port 1936

<Route infrastructure>
    Path          nxlog_internal => \
                    infrastructure_clean => infrastructure_rewrite => \
                    logstash_infrastructure
</Route>
#<Route debug_infrastructure>
#    Path          nxlog_internal => \
#                    infrastructure_clean => infrastructure_rewrite => \
#                    file_out_test
#</Route>

<% unless (scope['::iis_sites'] || '').empty? %>
<Route iis>
 Path <%= scope['::iis_sites'] %> => \
    iis_clean => iis_rewrite => \
    logstash_iis 
</Route>
#<Route iis>
# Path <%= scope['::iis_sites'] %> => \
#    iis_clean => iis_rewrite => \
#    logstash_iis 
#</Route>
<% end %>
